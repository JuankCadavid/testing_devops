pipeline {
    agent any

    tools {
        nodejs "Node 20"
    }

    environment {
        GITHUB_TOKEN = credentials('gitHubToken')
        GITHUB_REPOSITORY = 'JuankCadavid/testing_devops'
    }

        parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'Project Git Branch')
        choice(name: "DEPLOY_TO", choices: ["", "Develop", "Test", "Production"])
        booleanParam(name: 'SONARQUBE_ANALYSIS', defaultValue: false, description: '')
        booleanParam(name: 'MVN_BUILD', defaultValue: true, description: '')
    }

    stages {

        stage('Validate Branch') {
            steps {
                script {
                    echo "${params.GIT_BRANCH}"
                    def expectedBranch = 'master'
                    if (params.GIT_BRANCH != expectedBranch) {
                        currentBuild.result = 'ABORTED'
                        error "Aborting build: Branch is ${params.GIT_BRANCH}}, but expected ${expectedBranch}"
                    }
                }
            }
        }

        stage('Checkout GitSCM') {
            steps {
                echo "${params.GIT_BRANCH}"
                git(url: 'https://github.com/JuankCadavid/testing_devops', branch: "${params.GIT_BRANCH}", credentialsId: 'github-key-pat')
            }
        }

        stage('Cloning Git') {
            steps {
                echo "${params.GIT_BRANCH}"
                git branch: 'master', url: 'https://github.com/JuankCadavid/testing_devops'
            }
        }

        stage('Print branch name') {
            steps {
                echo "Branch name is: ${env.BRANCH_NAME}"
                sh 'git branch'
            }
        }

        stage('Startup') {
            steps {
                dir('devops') {
                    sh 'npm install'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        dir('devops') {
                            sh 'npm test'
                        }
                    } catch (Exception e) {
                        env.BUILD_EXCEPTION = "Stage: ${env.STAGE_NAME}, Error: ${e.message}"
                        env.FAILED_STAGE = "Stage: ${env.STAGE_NAME}"
                        e.printStackTrace() // print the stack trace
                        throw e // rethrow the exception to fail the build
                    }
                }
            }
        }

        stage('Linting') {
            steps {
                script {
                    try {
                        dir('devops') {
                            sh 'npm run lint || exit 1'
                        }
                    } catch (Exception e) {
                        env.BUILD_EXCEPTION = "Stage: ${env.STAGE_NAME}, Error: ${e.message}"
                        env.FAILED_STAGE = "Stage: ${env.STAGE_NAME}"
                        e.printStackTrace() // print the stack trace
                        throw e // rethrow the exception to fail the build
                    }
                }
            }
        }

        stage('Disable branch protection') {
            when {
                branch 'master'
            }
            steps {
                script {
                    def disableProtection = [
                        required_status_checks: null,
                        enforce_admins: false,
                        required_pull_request_reviews: null,
                        restrictions: null
                    ]
                    httpRequest(
                        url: "https://api.github.com/repos/${GITHUB_REPOSITORY}/branches/master/protection",
                        httpMode: 'DELETE',
                        contentType: 'APPLICATION_JSON',
                        customHeaders: [
                            [name: 'Authorization', value: "token ${GITHUB_TOKEN}"],
                            [name: 'Accept', value: 'application/vnd.github.luke-cage-preview+json']
                        ],
                        validResponseCodes: '204,404'
                    )
                }
            }
        }

        stage('Release') {
            when {
                branch 'master'
            }
            steps {
                withCredentials([string(credentialsId: 'gitHubToken', variable: 'GITHUB_TOKEN')]) {
                    dir('devops') {
                        sh 'git branch'
                        sh 'git checkout master'
                        sh 'npx semantic-release'
                    }
                }
            }
        }

        stage('Re-enable branch protection') {
            when {
                branch 'master'
            }
            steps {
                script {
                    def protectionConfig = [
                        required_status_checks: [
                            strict: true,
                            contexts: []
                        ],
                        enforce_admins: true,
                        required_pull_request_reviews: [
                            dismissal_restrictions: [:],
                            dismiss_stale_reviews: true,
                            require_code_owner_reviews: true,
                            required_approving_review_count: 1
                        ],
                        restrictions: null
                    ]
                    httpRequest(
                        url: "https://api.github.com/repos/${GITHUB_REPOSITORY}/branches/master/protection",
                        httpMode: 'PUT',
                        contentType: 'APPLICATION_JSON',
                        requestBody: groovy.json.JsonOutput.toJson(protectionConfig),
                        customHeaders: [
                            [name: 'Authorization', value: "token ${GITHUB_TOKEN}"],
                            [name: 'Accept', value: 'application/vnd.github.luke-cage-preview+json']
                        ]
                    )
                }
            }
        }
    }
}